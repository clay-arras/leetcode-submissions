{"id":1247727808,"question_id":547,"lang":"cpp","lang_name":"C++","time":"7 months, 1 week","timestamp":1714681274,"status":10,"status_display":"Accepted","runtime":"21 ms","url":"/submissions/detail/1247727808/","is_pending":"Not Pending","title":"Number of Provinces","memory":"18.5 MB","code":"class Solution {\npublic:\n    const static int MAXN = 2e2 + 1;\n    int visited[MAXN];\n    vector<int> adj_list[MAXN];\n    void dfs(int s) {\n        visited[s] = true;\n        for (auto i : adj_list[s]) {\n            if (!visited[i]) \n                dfs(i);\n        }\n    }\n    \n    int findCircleNum(vector<vector<int>>& isConnected) {\n        int N = (int)isConnected.size();\n        for (int i=0; i<N; i++) {\n            for (int j=i+1; j<N; j++) {\n                if (isConnected[i][j]) {\n                    adj_list[i].push_back(j);\n                    adj_list[j].push_back(i);\n                }\n            }\n        }\n        int count = 0;\n        for (int i=0; i<N; i++) {\n            if (!visited[i]) {\n                count++;\n                dfs(i);\n            }\n        }\n        return count;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"number-of-provinces","has_notes":false,"flag_type":1}