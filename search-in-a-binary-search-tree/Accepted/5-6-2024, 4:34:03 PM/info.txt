{"id":1251279116,"question_id":783,"lang":"cpp","lang_name":"C++","time":"7Â months","timestamp":1715038443,"status":10,"status_display":"Accepted","runtime":"32 ms","url":"/submissions/detail/1251279116/","is_pending":"Not Pending","title":"Search in a Binary Search Tree","memory":"33.1 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* find(TreeNode& n, int val, int l, int r) {\n        if (n.val == val)\n            return &n;\n        else if (n.val > val && n.left != NULL) \n            return find(*n.left, val, l, n.val);\n        else if (n.val < val && n.right != NULL)\n            return find(*n.right, val, n.val, r);\n        return NULL;\n    }\n\n    TreeNode* searchBST(TreeNode* root, int val) {\n        return find(*root, val, -INT_MAX, INT_MAX);\n    }\n};","compare_result":"111111111111111111111111111111111111","title_slug":"search-in-a-binary-search-tree","has_notes":false,"flag_type":1}