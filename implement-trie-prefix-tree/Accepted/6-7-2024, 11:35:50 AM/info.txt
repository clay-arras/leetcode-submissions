{"id":1280835132,"question_id":208,"lang":"cpp","lang_name":"C++","time":"6Â months","timestamp":1717785350,"status":10,"status_display":"Accepted","runtime":"111 ms","url":"/submissions/detail/1280835132/","is_pending":"Not Pending","title":"Implement Trie (Prefix Tree)","memory":"143.5 MB","code":"class Trie {\npublic:\n    vector<Trie*> pt;\n    bool en = false;\n    Trie() { pt = vector<Trie*>(26, nullptr); }\n    auto insert(string s) {\n        if (s.empty()) return (en = true);\n        if (pt[s[0]-'a'] == nullptr) {\n            Trie* t = new Trie();\n            pt[s[0]-'a'] = t;\n        }\n        return pt[s[0]-'a']->insert(s.substr(1));\n    }\n    bool search(string s) {\n        if (s.empty()) return en;\n        if (pt[s[0]-'a'] == nullptr)\n            return false;\n        return pt[s[0]-'a']->search(s.substr(1));\n    }\n    bool startsWith(string s) {\n        if (s.empty()) return true;\n        if (pt[s[0]-'a'] == nullptr)\n            return false;\n        return pt[s[0]-'a']->startsWith(s.substr(1));\n    }\n};\n\n/**\n * Your Trie object will be instantiated and called as such:\n * Trie* obj = new Trie();\n * obj->insert(word);\n * bool param_2 = obj->search(word);\n * bool param_3 = obj->startsWith(prefix);\n */","compare_result":"1111111111111111","title_slug":"implement-trie-prefix-tree","has_notes":false,"flag_type":1}