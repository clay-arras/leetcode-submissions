{"id":1280825248,"question_id":208,"lang":"cpp","lang_name":"C++","time":"6Â months","timestamp":1717784671,"status":10,"status_display":"Accepted","runtime":"108 ms","url":"/submissions/detail/1280825248/","is_pending":"Not Pending","title":"Implement Trie (Prefix Tree)","memory":"143.2 MB","code":"class Trie {\npublic:\n    vector<Trie*> pt;\n    bool isEnd;\n    Trie() {\n        pt = vector<Trie*>(26, nullptr);\n        isEnd = false;\n    }\n    \n    void insert(string word) {\n        if (word.empty()) {\n            isEnd = true;\n            return;\n        }\n        if (pt[word[0] - 'a'] == nullptr) {\n            Trie* t = new Trie();\n            pt[word[0] - 'a'] = t;\n        }\n        pt[word[0] - 'a']->insert(word.substr(1));\n    }\n\n    \n    bool search(string word) {\n        if (word.empty()) return isEnd;\n        if (pt[word[0] - 'a'] == nullptr) \n            return false;\n        return pt[word[0] - 'a']->search(word.substr(1));\n    }\n    \n    bool startsWith(string prefix) {\n        if (prefix.empty()) return true;\n        if (pt[prefix[0] - 'a'] == nullptr) \n            return false;\n        return pt[prefix[0] - 'a']->startsWith(prefix.substr(1));\n    }\n};\n\n/**\n * Your Trie object will be instantiated and called as such:\n * Trie* obj = new Trie();\n * obj->insert(word);\n * bool param_2 = obj->search(word);\n * bool param_3 = obj->startsWith(prefix);\n */","compare_result":"1111111111111111","title_slug":"implement-trie-prefix-tree","has_notes":false,"flag_type":1}