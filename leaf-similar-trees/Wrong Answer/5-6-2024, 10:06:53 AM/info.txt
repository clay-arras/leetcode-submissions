{"id":1251042825,"question_id":904,"lang":"python3","lang_name":"Python3","time":"7Â months","timestamp":1715015213,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1251042825/","is_pending":"Not Pending","title":"Leaf-Similar Trees","memory":"N/A","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    leaves1 = []\n    leaves2 = []\n\n    def dfs1(self, root):\n        if root is None:\n            return\n        if root.left is None and root.right is None:\n            Solution.leaves1.append(root.val)\n        self.dfs1(root.left)\n        self.dfs1(root.right)\n\n    def dfs2(self, root):\n        if root is None:\n            return\n        if root.left is None and root.right is None:\n            Solution.leaves2.append(root.val)\n        self.dfs2(root.left)\n        self.dfs2(root.right)\n\n    def leafSimilar(self, root1: Optional[TreeNode], root2: Optional[TreeNode]) -> bool:\n        self.dfs1(root1)\n        self.dfs2(root2)\n        return Solution.leaves1 == Solution.leaves2","compare_result":"1101001101010111010101010101010101010101111010","title_slug":"leaf-similar-trees","has_notes":false,"flag_type":1}