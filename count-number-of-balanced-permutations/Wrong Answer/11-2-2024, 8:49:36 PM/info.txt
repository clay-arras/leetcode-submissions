{"id":1441384415,"question_id":3637,"lang":"cpp","lang_name":"C++","time":"1Â month","timestamp":1730605776,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1441384415/","is_pending":"Not Pending","title":"Count Number of Balanced Permutations","memory":"N/A","code":"class Solution {\npublic:\n    int target;\n    vector<int> rest;\n    long long ans = 0;\n    const int MOD = 1e9+7;\n    long long f[41];\n\n    // start at {}, sum, everything greater than index\n    // if sum == target and arr.size = rest/2\n    \n    long long mod_fact(int n) {\n        f[0] = 1;\n        for(int i=1;i<=n;i++)\n            f[i] = (i * f[i-1]) % MOD;\n        return f[n];\n    }\n\n    void subsets(vector<int> arr, long long sum, int index) {\n        \n        if (sum > target) return;\n        if ((int)arr.size() > (int)rest.size()/2) return;\n        \n        // for (int i : arr)\n        //     cout << i << \" \";\n        // cout << endl;\n        if (sum == target && (int)arr.size() == (int)rest.size()/2) {\n            \n            unordered_map<long long, long long> m;\n            for (int i : arr)\n                m[i]++;\n            long long add = mod_fact((int)rest.size()/2);\n            for (auto [k, v] : m) {\n                add /= mod_fact(v);\n            }\n\n            unordered_map<long long, long long> m2;\n            for (int i : rest) {\n                if (m[i] == 0) {\n                    m2[i]++; \n                } else {\n                    m[i]--;\n                }\n            }\n            long long add2 = mod_fact(ceil((int)rest.size()*1.0/2));\n            for (auto [k, v] : m2) {\n                add2 /= mod_fact(v);\n            }\n            ans = (ans + (add2%MOD)*(add%MOD)) % MOD;\n            return;\n        }\n\n        int last = -1;\n        for (int i=index; i<(int)rest.size(); i++) {\n            if (rest[i] == last) continue;\n            arr.push_back(rest[i]);\n            sum += rest[i];\n            subsets(arr, sum, i+1);\n            last = rest[i];\n            arr.pop_back();\n            sum -= rest[i];\n        }\n    }\n\n    int countBalancedPermutations(string num) {\n        for (char c : num) {\n            target += c - '0';\n            rest.push_back(c - '0');\n        }\n        sort(rest.begin(), rest.end());\n        if (target % 2) return 0;\n        target /= 2;\n\n        subsets({}, 0, 0);\n        return ans;\n    }\n};","compare_resulttitle_slug":"count-number-of-balanced-permutations","has_notes":false,"flag_type":1}