{"id":1441373101,"question_id":3637,"lang":"cpp","lang_name":"C++","time":"1Â month","timestamp":1730605218,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1441373101/","is_pending":"Not Pending","title":"Count Number of Balanced Permutations","memory":"N/A","code":"class Solution {\npublic:\n    int target;\n    vector<int> rest;\n    long long ans = 0;\n    const int MOD = 1e9+7;\n\n    // start at {}, sum, everything greater than index\n    // if sum == target and arr.size = rest/2\n\n    void subsets(vector<int> arr, long long sum, int index) {\n        if (sum > target) return;\n        if ((int)arr.size() > (int)rest.size()/2) return;\n        if (sum == target && (int)arr.size() == (int)rest.size()/2) {\n            // for (int i : arr)\n            //     cout << i << \" \";\n            // cout << endl;\n            \n            unordered_map<long long, long long> m;\n            for (int i : arr)\n                m[i]++;\n            long long add = tgamma((int)rest.size()/2 + 1);\n            for (auto [k, v] : m) {\n                add /= tgamma(v+1);\n            }\n\n            unordered_map<long long, long long> m2;\n            for (int i : rest) {\n                if (m[i] == 0) {\n                    m2[i]++; \n                } else {\n                    m[i]--;\n                }\n            }\n            long long add2 = tgamma(ceil((int)rest.size()*1.0/2) + 1);\n            for (auto [k, v] : m2) {\n                add2 /= tgamma(v+1);\n            }\n            ans = (ans + (add2%MOD)*(add%MOD)) % MOD;\n            return;\n        }\n        for (int i=index; i<(int)rest.size(); i++) {\n            arr.push_back(rest[i]);\n            sum += rest[i];\n            subsets(arr, sum, i+1);\n            arr.pop_back();\n            sum -= rest[i];\n        }\n    }\n\n    int countBalancedPermutations(string num) {\n        for (char c : num) {\n            target += c - '0';\n            rest.push_back(c - '0');\n        }\n        if (target % 2) return 0;\n        target /= 2;\n\n        subsets({}, 0, 0);\n        return ans;\n    }\n};","compare_resulttitle_slug":"count-number-of-balanced-permutations","has_notes":false,"flag_type":1}