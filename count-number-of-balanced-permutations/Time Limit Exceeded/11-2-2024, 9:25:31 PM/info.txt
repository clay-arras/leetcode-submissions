{"id":1441417120,"question_id":3637,"lang":"cpp","lang_name":"C++","time":"1Â month","timestamp":1730607931,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1441417120/","is_pending":"Not Pending","title":"Count Number of Balanced Permutations","memory":"N/A","code":"class Solution {\npublic:\n    __int128 target;\n    vector<__int128> rest;\n    __int128 ans = 0;\n    const __int128 MOD = 1e9+7;\n    __int128 f[101];\n\n    __int128 mod_fact(__int128 n) {\n        f[0] = 1;\n        for(__int128 i=1; i<=n; i++)\n            f[i] = (i*1LL * f[i-1]);\n        return f[n];\n    }\n\n    void subsets(vector<__int128> arr, __int128 sum, __int128 index) {\n        if (sum > target) return;\n        if ((__int128)arr.size() > (rest.size()*1.0/2)) return;\n        \n        if (sum == target && ((__int128)arr.size() == ((__int128)rest.size()/2))) {\n            map<__int128, __int128> m;\n            for (__int128 i : arr)\n                m[i]++;\n            __int128 add = f[((__int128)rest.size()/2)];\n            for (auto [k, v] : m) {\n                assert(add % f[v] == 0);\n                add /= f[(v)];\n            }\n\n            map<__int128, __int128> m2;\n            for (__int128 i : rest) {\n                if (m[i] == 0) {\n                    m2[i]++; \n                } else {\n                    m[i]--;\n                }\n            }\n            __int128 add2 = f[(__int128)(ceil((__int128)rest.size()*1.0/2))];\n            for (auto [k, v] : m2) {\n                assert(add2 % f[v] == 0);\n                add2 /= f[(v)];\n            }\n            ans = (ans + (add2)*(add)) % MOD;\n            return;\n        }\n\n        __int128 last = -1;\n        for (__int128 i=index; i<(__int128)rest.size(); i++) {\n            if (rest[i] == last) continue;\n            arr.push_back(rest[i]);\n            sum += rest[i];\n            \n            subsets(arr, sum, i+1);\n            last = rest[i];\n            \n            arr.pop_back();\n            sum -= rest[i];\n        }\n    }\n\n    int countBalancedPermutations(string num) {\n        sort(num.begin(), num.end());\n        mod_fact(33);\n        for (char c : num) {\n            target += c - '0';\n            rest.push_back(c - '0');\n        }\n        sort(rest.begin(), rest.end());\n        if (target % 2) return 0;\n        target /= 2;\n\n        subsets({}, 0, 0);\n        return ans % MOD;\n    }\n};","compare_resulttitle_slug":"count-number-of-balanced-permutations","has_notes":false,"flag_type":1}