{"id":1216914816,"question_id":3213,"lang":"cpp","lang_name":"C++","time":"8 months, 1 week","timestamp":1711681462,"status":10,"status_display":"Accepted","runtime":"898 ms","url":"/submissions/detail/1216914816/","is_pending":"Not Pending","title":"Count Subarrays Where Max Element Appears at Least K Times","memory":"211 MB","code":"class Solution {\npublic:\n    long long countSubarrays(vector<int>& nums, int k) {\n        long long N = (int)nums.size();\n\n        long long maxN = 0;\n        for (int i=0; i<N; i++) {\n            maxN = max(maxN, 1LL*nums[i]);\n        }\n\n        vector<long long> pref(N+1, 0);\n        set<pair<int, int>> s;\n\n        for (int i=1; i<=N; i++) {\n            pref[i] = pref[i-1];\n            if (nums[i-1] == maxN)\n                pref[i] += 1;\n            s.insert({pref[i], i-1});\n        }\n\n        long long ans = 0;\n        for (int i=0; i<N; i++) {\n            auto it = s.lower_bound({pref[i] + k, -1});\n            if (it != s.end()) {\n                ans += N - (*it).second;\n                cout << i << \" \" << (*it).second << endl;\n            }\n        }\n        \n        return ans;\n    }\n};","compare_resulttitle_slug":"count-subarrays-where-max-element-appears-at-least-k-times","has_notes":false,"flag_type":1}