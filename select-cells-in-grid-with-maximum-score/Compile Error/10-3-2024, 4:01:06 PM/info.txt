{"id":1410984596,"question_id":3563,"lang":"cpp","lang_name":"C++","time":"2Â months","timestamp":1727996466,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/1410984596/","is_pending":"Not Pending","title":"Select Cells in Grid With Maximum Score","memory":"N/A","code":"#include <bits/stdc++.h>\nusing namespace std;\n\nclass Node {\npublic:\n    Node* left;  // 0\n    Node* right; // 1\n};\n\nclass Solution {\npublic:\n    Node* root;\n    Solution() { root = new Node(); }\n    void insert(int n) {\n        Node* temp = root;\n        for (int i = 31; i >= 0; i--) {\n            int currentBit = (n >> i) & 1;\n            if (!currentBit) {\n                if (!temp->left)\n                    temp->left = new Node();\n                temp = temp->left;\n            }\n            else {\n                if (!temp->right)\n                    temp->right = new Node();\n                temp = temp->right;\n            }\n        }\n    }\n\n    // O(1) loop\n    int helper(int val) {\n        int ans = 0;\n        Node* temp = root;\n\n        // 0 -> move right; else vice versa\n        for (int i = 31; i >= 0; i--) {\n            int currentBit = (val >> i) & 1;\n\n            if (!currentBit) {\n                if (temp->right) {\n                    temp = temp->right;\n                    ans += (1 << i);\n                } else\n                    temp = temp->left;\n\n            } else {\n                if (temp->left) {\n                    temp = temp->left;\n                    ans += (1 << i);\n                } else\n                    temp = temp->right;\n            }\n        }\n\n        return ans;\n    }\n\n    // O(n)\n    int findMaximumXOR(vector<int>& arr) {\n        int n = arr.size();\n        int res = 0;\n        for (int i = 0; i < n; i++) {\n            int value = arr[i];\n            insert(value);\n            int curAns = helper(value);\n            res = max(curAns, res);\n        }\n        return res;\n    }\n};\n\nint main() {\n    int arr[] = {14, 70, 53, 33, 49, 91, 36, 80, 92, 51, 66, 70};\n    int n = sizeof(arr) / sizeof(arr[0]);\n    Solution s;\n\n    vector<int> v(arr, arr + n);\n    cout << s.findMaximumXOR(v);\n\n    return 0;\n}","compare_result":null,"title_slug":"select-cells-in-grid-with-maximum-score","has_notes":false,"flag_type":1}