{"id":1455866386,"question_id":3658,"lang":"cpp","lang_name":"C++","time":"2 weeks, 3 days","timestamp":1731903202,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1455866386/","is_pending":"Not Pending","title":"Minimize the Maximum Adjacent Element Difference","memory":"N/A","code":"class Solution {\npublic:\n    template<class T>\n    T firstTrue(T l, T r, function<bool(T)> f) {\n        r++;\n        while (l < r) {\n            T mid = l + (r - l) / 2;\n            if (f(mid)) r = mid;\n            else l = mid + 1;\n        }\n        return l;\n    }\n\n    int minDifference(vector<int>& nums) {\n        vector<int> pos;\n        for (auto i : nums) {\n            if (i > 0)\n                pos.push_back(i);\n        }\n        if ((int)pos.size() == 0)\n            return 0;\n        if ((int)pos.size() == (int)nums.size()) {\n            int mx = 0;\n            for (int i=1; i<(int)nums.size(); i++) {\n                mx = max(mx, abs(nums[i] - nums[i-1]));\n            }\n            return mx;\n        }\n\n        if (nums[0] == -1) {\n            int first = 0;\n            for (int i=0; i<(int)nums.size(); i++) {\n                if (nums[i] > 0) {\n                    first = nums[i];\n                    break;\n                }\n            }\n            nums.insert(nums.begin(), first);\n        }\n        if (nums[(int)nums.size()-1] == -1) {\n            int last = 0;\n            for (int i=(int)nums.size()-1; i>=0; i--) {\n                if (nums[i] > 0) {\n                    last = nums[i];\n                    break;\n                }\n            }\n            nums.push_back(last);\n        }\n        vector<int> newNum;\n        newNum.push_back(nums[0]);\n        for (int i=1; i<(int)nums.size(); i++) {\n            if (nums[i] == -1 && newNum[(int)newNum.size()-1] == -1)\n                continue;\n            newNum.push_back(nums[i]);\n        }\n        nums = newNum;\n\n        function<bool(int)> ok = [&](int k) -> bool {\n            int x = *min_element(pos.begin(), pos.end()) + k;\n            int y = *max_element(pos.begin(), pos.end()) - k;\n\n            int maxDiff = 0;\n            for (int i=1; i<(int)nums.size()-1; i++){\n                if (nums[i] == -1) {\n                    int chooseX = max(abs(nums[i-1] - x), abs(nums[i+1] - x));\n                    int chooseY = max(abs(nums[i-1] - y), abs(nums[i+1] - y));\n                    maxDiff = max(maxDiff, min(chooseX, chooseY));\n                    i++;\n                } else {\n                    maxDiff = max(maxDiff, abs(nums[i] - nums[i-1]));\n                }\n            }\n            return maxDiff <= k;\n        };\n\n        int k = firstTrue(0, INT_MAX-1, ok); \n        return k;\n    }\n};","compare_resulttitle_slug":"minimize-the-maximum-adjacent-element-difference","has_notes":false,"flag_type":1}