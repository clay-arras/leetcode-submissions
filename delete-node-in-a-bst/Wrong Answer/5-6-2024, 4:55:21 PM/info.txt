{"id":1251286988,"question_id":450,"lang":"cpp","lang_name":"C++","time":"7Â months","timestamp":1715039721,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1251286988/","is_pending":"Not Pending","title":"Delete Node in a BST","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* find(TreeNode& n, int val, int l, int r, TreeNode* prev) {\n        if (n.val == val) return prev;\n        else if (n.val < val && n.right != NULL) return find(*n.right, val, n.val, r, &n);\n        else if (n.val > val && n.left != NULL) return find(*n.left, val, l, n.val, &n);\n        return NULL;\n    }\n    TreeNode* deleteNode(TreeNode* root, int key) {\n        if (root == NULL)\n            return NULL;\n\n        TreeNode* ptr = find(*root, key, -INT_MAX, INT_MAX, NULL); \n        if (ptr != NULL) {\n            if (ptr->left->val == key) {\n                ptr->left = ptr->left->left;\n                ptr->left->left = ptr->left->right;\n            } else if (ptr->right->val == key) {\n                ptr->right = ptr->right->left;\n                ptr->right->left = ptr->right->right;\n            }\n        }\n\n        return root;\n    }\n};","compare_result":"01101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"delete-node-in-a-bst","has_notes":false,"flag_type":1}