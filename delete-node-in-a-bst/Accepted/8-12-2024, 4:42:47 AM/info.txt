{"id":1353063805,"question_id":450,"lang":"cpp","lang_name":"C++","time":"3 months, 3 weeks","timestamp":1723462967,"status":10,"status_display":"Accepted","runtime":"27 ms","url":"/submissions/detail/1353063805/","is_pending":"Not Pending","title":"Delete Node in a BST","memory":"33.5 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* find(TreeNode* node, int val) {\n        TreeNode* ptr = NULL;\n        if (node->left != NULL) {\n            if (node->left->val == val) return node;\n            TreeNode* res = find(node->left, val);\n            if (res != NULL) ptr = res;\n        }\n        if (node->right != NULL) {\n            if (node->right->val == val) return node;\n            TreeNode* res = find(node->right, val);\n            if (res != NULL) ptr = res;\n        }\n        \n        return ptr;\n    }\n\n    void insert(TreeNode* node, TreeNode* in) {\n        if (node->val > in->val) {\n            if (node->left == NULL) node->left = in;\n            else insert(node->left, in);\n        } else {\n            if (node->right == NULL) node->right = in;\n            else insert(node->right, in);\n        }\n    }\n\n    TreeNode* deleteNode(TreeNode* root, int key) {\n        TreeNode* top = new TreeNode(INT_MAX, root, NULL);\n        TreeNode* node = find(top, key);\n\n        if (node == NULL)\n            return top->left;\n\n        if (node->left != NULL && node->left->val == key) {\n            auto a = node->left->left;\n            auto b = node->left->right;\n\n            node->left = NULL;\n            if (a != NULL) insert(node, a);\n            if (b != NULL) insert(node, b);\n\n        } else if (node->right != NULL && node->right->val == key) {\n            auto a = node->right->left;\n            auto b = node->right->right;\n\n            node->right = NULL;\n            if (a != NULL) insert(node, a);\n            if (b != NULL) insert(node, b);\n        }\n\n        return top->left;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"delete-node-in-a-bst","has_notes":false,"flag_type":1}