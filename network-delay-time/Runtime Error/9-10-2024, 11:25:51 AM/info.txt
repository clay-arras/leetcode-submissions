{"id":1385736305,"question_id":744,"lang":"cpp","lang_name":"C++","time":"2 months, 3 weeks","timestamp":1725992751,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1385736305/","is_pending":"Not Pending","title":"Network Delay Time","memory":"N/A","code":"class Solution {\npublic:\n    const static int MX = 1e2+2;\n    vector<pair<int, int>> adj_list[MX];\n    int N;\n    \n    int dijkstras(int k) {\n        vector<int> dist(N, INT_MAX);\n        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;\n        \n        dist[k] = 0;\n        pq.push({0, k});\n        \n        while (!pq.empty()) {\n            pair<int, int> x = pq.top();\n            pq.pop();\n            \n            if (x.first != dist[x.second])\n                continue;\n            for (pair<int, int> i : adj_list[x.second]) {\n                if (x.first + i.second < dist[i.first]) {\n                    dist[i.first] = x.first + i.second;\n                    pq.push({dist[i.first], i.first});\n                }\n            }\n        }\n        return *max_element(dist.begin(), dist.end());\n    }\n    \n    int networkDelayTime(vector<vector<int>>& times, int n, int k) {\n        N = n;\n        for (auto i : times) {\n            adj_list[i[0]].push_back({i[1], i[2]});\n            adj_list[i[1]].push_back({i[0], i[2]});\n        }\n        int v = dijkstras(k); \n        return (v == INT_MAX ? -1 : v);\n            \n    }\n};\n","compare_result":"00000000000000000000000000000000000000000000000000000","title_slug":"network-delay-time","has_notes":false,"flag_type":1}