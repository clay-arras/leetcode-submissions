{"id":1402333142,"question_id":2494,"lang":"cpp","lang_name":"C++","time":"2 months, 1 week","timestamp":1727303195,"status":10,"status_display":"Accepted","runtime":"1658 ms","url":"/submissions/detail/1402333142/","is_pending":"Not Pending","title":"Sum of Prefix Scores of Strings","memory":"236 MB","code":"class Solution {\npublic:\n    const static int MOD1 = 1e9+7;\n    const static int P1 = 31;\n    const static int MOD2 = 1e9+9;\n    const static int P2 = 37;\n    // long long compute_hash(string s) {\n    //     long long hash = 0;\n    //     long long pow = 1;\n    //     for (int i=0; i<(int)s.size(); i++) {\n    //         hash += ((s[i] - 'a' + 1)*pow) % MOD; \n    //         pow = (pow * P) % MOD;\n    //     }\n    //     return hash;\n    // }\n    struct hash_pair {\n        template <class T1, class T2>\n        size_t operator()(const pair<T1, T2>& p) const\n        {\n            // Hash the first element\n            size_t hash1 = hash<T1>{}(p.first);\n            // Hash the second element\n            size_t hash2 = hash<T2>{}(p.second);\n            // Combine the two hash values\n            return hash1\n                ^ (hash2 + 0x9e3779b9 + (hash1 << 6)\n                    + (hash1 >> 2));\n        }\n    };\n\n\n    vector<int> sumPrefixScores(vector<string>& words) {\n        unordered_map<pair<long long, long long>, int, hash_pair> m;\n        int N = (int)words.size();\n        for (int i=0; i<N; i++) {\n            long long hash1 = 0;\n            long long pow1 = 1;\n            long long hash2 = 0;\n            long long pow2 = 1;\n            for (int j=0; j<(int)words[i].size(); j++) {\n                hash1 += ((words[i][j] - 'a' + 1)*pow1) % MOD1; \n                pow1 = (pow1 * P1) % MOD1;\n                hash2 += ((words[i][j] - 'a' + 1)*pow2) % MOD2; \n                pow2 = (pow2 * P2) % MOD1;\n                m[{hash1, hash2}]++;\n            }\n        }\n        vector<int> ans;\n        for (int i=0; i<N; i++) {\n            int sum = 0;\n            long long hash1 = 0;\n            long long pow1 = 1;\n            long long hash2 = 0;\n            long long pow2 = 1;\n            for (int j=0; j<(int)words[i].size(); j++) {\n                hash1 += ((words[i][j] - 'a' + 1)*pow1) % MOD1; \n                pow1 = (pow1 * P1) % MOD1;\n                hash2 += ((words[i][j] - 'a' + 1)*pow2) % MOD2; \n                pow2 = (pow2 * P2) % MOD1;\n                sum += m[{hash1, hash2}];\n            }\n            ans.push_back(sum);\n        }\n\n\n        return ans;\n    }\n};","compare_result":"11111111111111111111111111111111111111","title_slug":"sum-of-prefix-scores-of-strings","has_notes":false,"flag_type":1}