{"id":1424652531,"question_id":604,"lang":"python3","lang_name":"Python3","time":"1 month, 2 weeks","timestamp":1729107594,"status":10,"status_display":"Accepted","runtime":"46 ms","url":"/submissions/detail/1424652531/","is_pending":"Not Pending","title":"Design Compressed String Iterator","memory":"16.6 MB","code":"\"\"\"Design and implement a data structure for a compressed string iterator. The given compressed string will be in the form of each letter followed by a positive integer representing the number of this letter existing in the original uncompressed string.\n\nImplement the StringIterator class:\n\n    next() Returns the next character if the original string still has uncompressed characters, otherwise returns a white space.\n    hasNext() Returns true if there is any letter needs to be uncompressed in the original string, otherwise returns false.\n\"\"\"\nfrom typing import List\n\n\nclass StringIterator:\n    def __init__(self, compressed_string: str) -> None:\n        self.compressed_string: str = compressed_string\n        self.decompressed_string_list: List[tuple[int, str]] = []\n\n        while len(compressed_string) != 0:\n            index = 1\n            num_str = \"\"\n            while index < len(compressed_string) and compressed_string[index].isdigit():\n                num_str += compressed_string[index]\n                index += 1\n\n            self.decompressed_string_list.append(\n                (int(num_str), compressed_string[0])\n            )\n            compressed_string = compressed_string[index :]\n\n    def next(self) -> str:\n        if not self.hasNext():\n            return \" \"\n        current_group = self.decompressed_string_list[0]\n        return_char = current_group[1]\n        self.decompressed_string_list[0] = (current_group[0] - 1, current_group[1])\n        if self.decompressed_string_list[0][0] == 0:\n            self.decompressed_string_list = self.decompressed_string_list[1:]\n        return return_char\n\n    def hasNext(self) -> bool:\n        return bool(self.decompressed_string_list)\n\n    def _verify_string(self, compressed_str: str) -> bool:\n        pass","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"design-compressed-string-iterator","has_notes":false,"flag_type":1}