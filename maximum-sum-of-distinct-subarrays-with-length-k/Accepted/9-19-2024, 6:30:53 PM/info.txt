{"id":1395990805,"question_id":2552,"lang":"cpp","lang_name":"C++","time":"2 months, 2 weeks","timestamp":1726795853,"status":10,"status_display":"Accepted","runtime":"339 ms","url":"/submissions/detail/1395990805/","is_pending":"Not Pending","title":"Maximum Sum of Distinct Subarrays With Length K","memory":"100.8 MB","code":"class Solution {\npublic:\n    long long maximumSubarraySum(vector<int>& nums, int k) {\n        int N = (int)nums.size();\n        long long ans = 0, sum = 0, ok = 0;\n        map<int, int> cnt;\n        for (int i=0; i<N; i++) {\n            if (i >= k) {\n                sum -= nums[i-k];\n                cnt[nums[i-k]]--;\n                if (cnt[nums[i-k]] == 1) \n                    ok--;\n            }\n            sum += nums[i];\n            if (cnt[nums[i]] == 1) \n                ok++;\n            cnt[nums[i]]++;\n\n            if (!ok && i+1 >= k) ans = max(ans, sum);\n        }\n        return ans;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-sum-of-distinct-subarrays-with-length-k","has_notes":false,"flag_type":1}