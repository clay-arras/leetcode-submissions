{"id":1344993353,"question_id":10,"lang":"cpp","lang_name":"C++","time":"4Â months","timestamp":1722836769,"status":10,"status_display":"Accepted","runtime":"12 ms","url":"/submissions/detail/1344993353/","is_pending":"Not Pending","title":"Regular Expression Matching","memory":"9.2 MB","code":"class Solution {\npublic:\n    bool isMatch(string s, string p) {\n        s = '~' + s;\n        p = '~' + p;\n        int N = (int)p.size(); \n        int M = (int)s.size();\n\n        vector<vector<int>> dp(N, vector<int> (M, 0));\n        dp[0][0] = 1;\n        for (int i=0; i<N; i++) {\n            for (int j=0; j<M; j++) {\n                if (p[i] == '*') {\n                    // if p[i] is {*}\n                    dp[i][j] |= (i-2>=0 ? dp[i-2][j] : 0);\n                    dp[i][j] |= (i-1>=0 ? dp[i-1][j] : 0);\n\n                    // if p[i-1,i] is {.*}\n                    if ((i-1>=0 && j-1>=0) && p[i-1] == '.')\n                        dp[i][j] |= dp[i][j-1];\n                    // if p[i-1,i] is {a-z*}\n                    if ((i-1>=0 && j-1>=0) && p[i-1] != '.')\n                        dp[i][j] |= dp[i][j-1] && (p[i-1] == s[j]);\n                    \n                } else {\n                    // if p[i] is not {*}\n                    if (p[i] == '.') {\n                        // if p[i] is {.}\n                        dp[i][j] |= (i-1>=0 && j-1>=0 ? dp[i-1][j-1] : 0);\n                    } else {\n                        // if p[i] is in {a-z}\n                        dp[i][j] |= (i-1>=0 && j-1>=0 ? dp[i-1][j-1] : 0) && (p[i] == s[j]);\n                    }\n                }\n            }\n        }\n\n        for (int i=0; i<M; i++) {\n            for (int j=0; j<N; j++) {\n                cout << dp[j][i] << \" \";\n            }\n            cout << endl;\n        }\n\n        return dp[N-1][M-1];\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"regular-expression-matching","has_notes":false,"flag_type":1}