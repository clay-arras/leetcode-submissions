{"id":1246959875,"question_id":2216,"lang":"python3","lang_name":"Python3","time":"7 months, 1 week","timestamp":1714610230,"status":10,"status_display":"Accepted","runtime":"620 ms","url":"/submissions/detail/1246959875/","is_pending":"Not Pending","title":"Delete the Middle Node of a Linked List","memory":"50.3 MB","code":"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def deleteMiddle(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        count = 0\n        n = head\n        while n != None:\n            count += 1\n            n = n.next\n        \n        if count == 1 or count == 0:\n            return None\n        \n        n = head\n        count = floor(count/2)\n        for i in range(count - 1):\n            n = n.next\n\n        tmp = n.next.next\n        n.next = tmp\n\n        return head","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"delete-the-middle-node-of-a-linked-list","has_notes":false,"flag_type":1}