{"id":1248693530,"question_id":1727,"lang":"cpp","lang_name":"C++","time":"7Â months","timestamp":1714790816,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1248693530/","is_pending":"Not Pending","title":"Cat and Mouse II","memory":"N/A","code":"class Solution {\npublic:\n    int N, M;\n    vector<string> g;\n    pair<int, int> c, m, f;\n    vector<int> dx = {0, 1, 0 , -1};\n    vector<int> dy = {1, 0, -1 , 0};\n    \n    int dijkstras(int i, int j, int mx) {\n        vector<vector<int>> d (N, vector<int> (M, INT_MAX - 1e2));\n        vector<vector<bool>> visited (N, vector<bool> (M, false));\n        \n        priority_queue<pair<int, pair<int, int>>> pq;\n        d[i][j] = 0;\n        pq.push({0, {i, j}});\n \n        while (!pq.empty()) {\n            int a = pq.top().second.first, b = pq.top().second.second;\n            pq.pop();\n \n            if (visited[a][b])\n                continue;\n            visited[a][b] = true;\n            \n            for (int k=1; k<=mx; k++) {\n                for (int v=0; v<4; v++) {\n                    int x = a + dx[v] * mx, y = b + dy[v] * mx;\n                    if (x >= 0\n                        && x < N\n                        && y >= 0\n                        && y < M\n                        && g[x][y] != '#') {\n \n                        if (d[a][b] + 1 < d[x][y]) {\n                            d[x][y] = d[a][b] + 1;\n                            pq.push({-d[x][y], {x, y}});\n                        }\n                    }\n                }\n            }\n        }\n \n        return d[f.first][f.second];\n    }\n \n    bool canMouseWin(vector<string>& grid, int catJump, int mouseJump) {\n        N = (int)grid.size();\n        M = (int)grid[0].size();\n        g = grid;\n        for (int i=0; i<N; i++) {\n            for (int j=0; j<M; j++) {\n                if (g[i][j] == 'C') \n                    c.first = i, c.second = j;\n                if (g[i][j] == 'M')\n                    m.first = i, m.second = j;\n                if (g[i][j] == 'F')\n                    f.first = i, f.second = j;\n            }\n        }\n \n        int catSteps = dijkstras(c.first, c.second, catJump);\n        int mouseSteps = dijkstras(m.first, m.second, mouseJump);\n        cout << catSteps << endl;\n        cout << mouseSteps << endl;\n        return catSteps >= mouseSteps;\n    }\n};\n","compare_result":"10001111000011110001111011011100111110000010000111101000110000001011110100010011001000010001110101000100011010001100010001010001000000010001100101101000101100010111010100011001101","title_slug":"cat-and-mouse-ii","has_notes":false,"flag_type":1}