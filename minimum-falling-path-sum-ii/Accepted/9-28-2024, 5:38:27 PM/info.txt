{"id":1405494881,"question_id":1224,"lang":"cpp","lang_name":"C++","time":"2 months, 1 week","timestamp":1727570307,"status":10,"status_display":"Accepted","runtime":"222 ms","url":"/submissions/detail/1405494881/","is_pending":"Not Pending","title":"Minimum Falling Path Sum II","memory":"18.5 MB","code":"class Solution {\npublic:\n    int minFallingPathSum(vector<vector<int>>& grid) {\n        // dp[i][j]\n        // where i is the row, and j is the col, and dp[i][j] = sum\n\n        int N = (int)grid.size(), M = (int)grid[0].size();\n        vector<vector<int>> dp(N, vector<int>(M, INT_MAX));\n        for (int i=0; i<M; i++)\n            dp[0][i] = grid[0][i];\n\n        for (int i=1; i<N; i++) {\n            for (int j=0; j<M; j++) {\n                for (int k=0; k<M; k++) {\n                    if (k != j)\n                        dp[i][j] = min(dp[i][j], dp[i-1][k]);\n                }\n                // if (j-1 >= 0)\n                    // dp[i][j] = min(dp[i][j], dp[i-1][j-1]);\n                // if (j+1 < M)\n                    // dp[i][j] = min(dp[i][j], dp[i-1][j+1]);\n                dp[i][j] += grid[i][j];\n\n            }\n        }\n\n        int ans = INT_MAX;\n        for (int i=0; i<M; i++)\n            ans = min(ans, dp[N-1][i]);\n        return ans;\n    }\n};\n\n/*\n\n[[-73,61,43,-48,-36]\n,[ 3, 30,27, 57, 10]\n,[96,-76,84, 59,-15]\n,[5, -49,76, 31,-7]\n,[97, 91,61,-46,67]]\n\n*/","compare_result":"11111111111111111","title_slug":"minimum-falling-path-sum-ii","has_notes":false,"flag_type":1}