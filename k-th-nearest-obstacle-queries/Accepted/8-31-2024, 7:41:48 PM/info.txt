{"id":1374800473,"question_id":3495,"lang":"cpp","lang_name":"C++","time":"3Â months","timestamp":1725158508,"status":10,"status_display":"Accepted","runtime":"1264 ms","url":"/submissions/detail/1374800473/","is_pending":"Not Pending","title":"K-th Nearest Obstacle Queries","memory":"359.2 MB","code":"#include <ext/pb_ds/assoc_container.hpp>\n#include <ext/pb_ds/tree_policy.hpp>\nusing namespace __gnu_pbds;\n\ntemplate<class T>\nusing oset = tree<T, null_type,\n      less<T>, rb_tree_tag, tree_order_statistics_node_update>;\n\nclass Solution {\npublic:\n    vector<int> resultsArray(vector<vector<int>>& queries, int k) {\n        vector<int> ans;\n        oset<pair<int, int>> s;\n        for (int i=0; i<(int)queries.size(); i++) {\n            s.insert({abs(queries[i][0]) + abs(queries[i][1]), i});\n            auto it = s.find_by_order(k-1);\n            if (it != s.end()) {\n                ans.push_back(it->first);\n            } else ans.push_back(-1);\n        }\n\n        return ans;\n    }\n};","compare_resulttitle_slug":"k-th-nearest-obstacle-queries","has_notes":false,"flag_type":1}