{"id":1395995304,"question_id":2828,"lang":"cpp","lang_name":"C++","time":"2 months, 2 weeks","timestamp":1726796378,"status":10,"status_display":"Accepted","runtime":"138 ms","url":"/submissions/detail/1395995304/","is_pending":"Not Pending","title":"Lexicographically Smallest String After Substring Operation","memory":"56.5 MB","code":"class Solution {\npublic:\n    string smallestString(string s) {\n        // two cases:\n        // if char is 'a' then skip\n        // start window after first non-'a' or last one\n        // keep going while there is no 'a'\n        int N = (int)s.size();\n        int i=0;\n        while (i<N-1 && s[i] == 'a')\n            i++;\n        int j = 1;\n        while (i+j<N && s[i+j] != 'a')\n            j++;\n        cout << i << \" \" << j << endl;\n        string ans = \"\";\n        for (int k=0; k<N; k++) {\n            if (k >= i && k < i+j)\n                ans += (s[k]-'a'-1+26)%26 + 'a';\n            else \n                ans += s[k];\n        }\n\n        return ans;\n    }\n};","compare_resulttitle_slug":"lexicographically-smallest-string-after-substring-operation","has_notes":false,"flag_type":1}