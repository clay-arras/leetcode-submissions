{"id":1371356142,"question_id":146,"lang":"cpp","lang_name":"C++","time":"3 months, 1 week","timestamp":1724864093,"status":10,"status_display":"Accepted","runtime":"404 ms","url":"/submissions/detail/1371356142/","is_pending":"Not Pending","title":"LRU Cache","memory":"168.7 MB","code":"class LRUCache {\npublic:\n    map<int, int> count, m;\n    queue<int> q;\n    int k;\n    LRUCache(int capacity) {\n        k = capacity;\n    }\n    \n    int get(int key) {\n        if (count[key]) {\n            q.push(key);\n            count[key]++;\n            return m[key];\n        }\n        return -1;\n    }\n    \n    void put(int key, int value) {\n        m[key] = value;\n        if (!count[key]) \n            k--;\n        count[key]++;\n        q.push(key);\n        while (k < 0) {\n            count[q.front()]--;\n            if (!count[q.front()])\n                k++;\n            q.pop();\n        }\n\n    }\n};\n\n/**\n * Your LRUCache object will be instantiated and called as such:\n * LRUCache* obj = new LRUCache(capacity);\n * int param_1 = obj->get(key);\n * obj->put(key,value);\n */","compare_result":"11111111111111111111111","title_slug":"lru-cache","has_notes":false,"flag_type":1}