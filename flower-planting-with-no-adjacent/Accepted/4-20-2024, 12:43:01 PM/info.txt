{"id":1237605631,"question_id":1120,"lang":"cpp","lang_name":"C++","time":"7 months, 2 weeks","timestamp":1713642181,"status":10,"status_display":"Accepted","runtime":"102 ms","url":"/submissions/detail/1237605631/","is_pending":"Not Pending","title":"Flower Planting With No Adjacent","memory":"45.7 MB","code":"class Solution {\npublic:\n    const static int MAXN = 1e4+4;\n    vector<int> adj_list[MAXN];\n    vector<int> visited;\n\n    void dfs(int s) {\n        if (visited[s] != -1) return;\n        for (int j=1; j<=4; j++) {\n            bool good = true;\n            for (int i : adj_list[s]) \n                good &= (visited[i] != j || visited[i] == -1);\n            if (good) visited[s] = j;\n        }\n\n        for (int i : adj_list[s]) {\n            dfs(i);\n        }\n    }\n\n    vector<int> gardenNoAdj(int n, vector<vector<int>>& paths) {\n        visited = vector<int> (n, -1);\n\n        for (auto e : paths) {\n            adj_list[e[0]-1].push_back(e[1]-1);\n            adj_list[e[1]-1].push_back(e[0]-1);\n        }\n\n        for (int i=0; i<n; i++)\n            if (visited[i] == -1)\n                dfs(i);\n\n        return visited;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111","title_slug":"flower-planting-with-no-adjacent","has_notes":false,"flag_type":1}