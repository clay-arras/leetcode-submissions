{"id":1422452623,"question_id":225,"lang":"python3","lang_name":"Python3","time":"1 month, 3 weeks","timestamp":1728937179,"status":10,"status_display":"Accepted","runtime":"34 ms","url":"/submissions/detail/1422452623/","is_pending":"Not Pending","title":"Implement Stack using Queues","memory":"16.6 MB","code":"from collections import deque\n\nclass MyStack:\n    def __init__(self):\n        self.main_queue = deque()\n        self.temp_queue = deque()\n\n    def push(self, value: int) -> None:\n        prev_queue_size = len(self.main_queue)\n        self.main_queue.append(value)\n\n        for i in range(prev_queue_size):\n            topVal = self.main_queue.popleft()\n            self.main_queue.append(topVal)\n\n    def pop(self) -> int:\n        if self.empty():\n            raise Exception(\"No elements in the stack\")\n        return self.main_queue.popleft()\n\n    def top(self) -> int:\n        return self.main_queue[0]\n\n    def empty(self) -> bool:\n        return len(self.main_queue) == 0\n\n\n# Your MyStack object will be instantiated and called as such:\n# obj = MyStack()\n# obj.push(x)\n# param_2 = obj.pop()\n# param_3 = obj.top()\n# param_4 = obj.empty()","compare_result":"111111111111111111","title_slug":"implement-stack-using-queues","has_notes":false,"flag_type":1}