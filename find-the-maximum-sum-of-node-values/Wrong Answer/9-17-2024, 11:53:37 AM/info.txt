{"id":1393596220,"question_id":3307,"lang":"cpp","lang_name":"C++","time":"2 months, 2 weeks","timestamp":1726599217,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1393596220/","is_pending":"Not Pending","title":"Find the Maximum Sum of Node Values","memory":"N/A","code":"class Solution {\npublic:\n    const static int MX = 2e4 + 4;\n    vector<int> adj_list[MX], arr;\n    vector<bool> visited;\n    int N, K;\n    vector<vector<int>> dp;\n    vector<int> order;\n\n    void topological(int s) {\n        visited[s] = true;\n        for (int i : adj_list[s]) {\n            if (!visited[i])\n                topological(i);\n        }\n        order.push_back(s);\n    }\n\n    long long maximumValueSum(vector<int>& nums, int k, vector<vector<int>>& edges) {\n        arr = nums;\n        N = (int)arr.size(), K = k;\n        for (auto i : edges) {\n            adj_list[i[0]].push_back(i[1]);\n            adj_list[i[1]].push_back(i[0]);\n        }\n        visited = vector<bool> (N, false);\n\n        order.clear();\n        topological(0);\n        reverse(order.begin(), order.end());\n\n        dp = vector<vector<int>> (N, vector<int>(2, 0));\n        visited = vector<bool> (N, false);\n        dp[0][0] = arr[0];\n\n        for (int j=0; j<N; j++) {\n            int s = order[j];\n            int sp = (j ? order[j-1] : 0);\n            visited[s] = true;\n            // dp[s][0] = max(dp[s][0], arr[s] + max(dp[i][0], dp[i][1]));\n            // dp[s][1] = max(dp[s][1], (arr[s]^K) + max(dp[i][0] + arr[i]^K - arr[i], dp[i][1] - arr[i]^K + arr[i]));\n            // dp[s][0] = max(dp[s][0], arr[s] + max(dp[sp][0], dp[sp][1]));\n            // dp[s][1] = max(dp[s][1], (arr[s]^K) + max(dp[sp][0] + arr[i]^K - arr[i], dp[sp][1] - arr[i]^K + arr[i]));\n            \n            for (int i : adj_list[s]) {\n            //     // if (!visited[i]) {\n            //     //     dp[i][0] = max(dp[i][0], arr[i] + max(dp[s][0], dp[s][1]));\n            //     //     dp[i][1] = max(dp[i][1], (arr[i]^K) + max(dp[s][0] + arr[s]^K - arr[s], dp[s][1] - arr[s]^K + arr[s]));\n            //     // }\n                cout << s << \" \" << sp << \" \" << i << endl;\n                // cout \n                if (visited[i]) {\n                    dp[s][0] = max(dp[s][0], arr[s] + max(dp[sp][0], dp[sp][1]));\n                    dp[s][1] = max(dp[s][1], (arr[s]^K) + max(dp[sp][0] + (arr[i]^K) - arr[i], dp[sp][1] - (arr[i]^K) + arr[i]));\n                }\n            }\n        }\n\n        for (int j=0; j<2; j++) {\n            for (int i=0; i<N; i++)\n                cout << dp[order[i]][j] << \" \";\n            cout << endl;\n        }\n\n        return max(dp[order[N-1]][0], dp[order[N-1]][1]);\n    }\n};","compare_resulttitle_slug":"find-the-maximum-sum-of-node-values","has_notes":false,"flag_type":1}