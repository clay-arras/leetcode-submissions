{"id":1416499225,"question_id":465,"lang":"cpp","lang_name":"C++","time":"1 month, 3 weeks","timestamp":1728441205,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1416499225/","is_pending":"Not Pending","title":"Optimal Account Balancing","memory":"N/A","code":"class Solution {\npublic:\n    const int MX = 11;\n    // vector<pair<int, int>> adj_list[MX];\n    // int amount[MX];\n    // bool visited[MX];\n\n    // void dfs(int x) {\n\n    // }\n\n    int minTransfers(vector<vector<int>>& transactions) {\n        // for (auto i : transactions) {\n        //     adj_list[i[0]].push_back({i[1], i[2]});\n        // }\n        vector<int> amount(MX, 0);\n        for (auto i : transactions) {\n            amount[i[0]] -= i[2];\n            amount[i[1]] += i[2];\n        }\n        for (int i : amount)\n            cout << i << \" \";\n        cout << endl;\n\n        int ans;\n        sort(amount.begin(), amount.end());\n        for (ans = 0; amount[0] != 0; ans++) {\n            int N = (int)amount.size();\n            amount.push_back(amount[0] + amount[N-1]);\n            amount[0] = 0;\n            amount[N-1] = 0;\n            sort(amount.begin(), amount.end());\n        }\n\n        return ans;\n    }\n};\n\n// positive means is owed money\n// negative means needs to give money\n// [-2, 1, 1]\n// [0, 1, 5, -6, -2, 2]\n// [4, -1, -1, -1, -1]\n\n// [-1, -1, -1, -1, 4] = 4\n// [-6, -2, 0, 1, 2, 5] = 3\n\n// 1 [-10, -7, -5, -2, 0, 1, 1, 1, 6, 7, 8]\n// 2 [-7, -5, -2, -2, 0, 1, 1, 1, 6, 7]\n// 3 [-5, -2, -2, 0, 1, 1, 1, 6]\n// 4 [-2, -2, 0, 1, 1, 1, 1]\n// 5 [-2, -1, 0, 1, 1, 1]\n// 6 [-1, -1, 0, 1, 1]\n// 7 [-1, 0, 1]\n// 8 [0, 0, 0]\n\n// [12, 5, -2, -5, -8]\n// [-7, -5, -3, 5, 10] = 3\n// [-5, -3, 3, 5] = 2\n\n// lower bound solution -> max(# pos, # neg)\n// two pointers","compare_result":"111111111111111100011101011111000000","title_slug":"optimal-account-balancing","has_notes":false,"flag_type":1}