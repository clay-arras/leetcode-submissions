{"id":1301378712,"question_id":1285,"lang":"java","lang_name":"Java","time":"5 months, 1 week","timestamp":1719444985,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1301378712/","is_pending":"Not Pending","title":"Balance a Binary Search Tree","memory":"45.6 MB","code":"class Solution {\n    List<TreeNode> sortedArr = new ArrayList<>();\n    public TreeNode balanceBST(TreeNode root) {\n        inorderTraverse(root);\n        return sortedArrayToBST(0, sortedArr.size() - 1);\n    }\n    void inorderTraverse(TreeNode root) {\n        if (root == null) return;\n        inorderTraverse(root.left);\n        sortedArr.add(root);\n        inorderTraverse(root.right);\n    }\n    TreeNode sortedArrayToBST(int start, int end) {\n        if (start > end) return null;\n        int mid = (start + end) / 2;\n        TreeNode root = sortedArr.get(mid);\n        root.left = sortedArrayToBST(start, mid - 1);\n        root.right = sortedArrayToBST(mid + 1, end);\n        return root;\n    }\n}\n","compare_result":"11111111111111111","title_slug":"balance-a-binary-search-tree","has_notes":false,"flag_type":1}