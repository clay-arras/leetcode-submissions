{"id":1366649458,"question_id":295,"lang":"cpp","lang_name":"C++","time":"3 months, 1 week","timestamp":1724500282,"status":10,"status_display":"Accepted","runtime":"244 ms","url":"/submissions/detail/1366649458/","is_pending":"Not Pending","title":"Find Median from Data Stream","memory":"122 MB","code":"class MedianFinder {\npublic:\n    priority_queue<int> sm;\n    priority_queue<int, vector<int>, greater<int>> lg;\n    MedianFinder() {\n        \n    }\n    \n    void addNum(int num) {\n        if ((int)sm.size() == (int)lg.size()) {\n            if (!sm.empty() && num < sm.top()) {\n                lg.push(sm.top());\n                sm.pop();\n                sm.push(num);\n            } else {\n                lg.push(num);\n            }\n        } else {\n            if (!lg.empty() && num > lg.top()) {\n                sm.push(lg.top());\n                lg.pop();\n                lg.push(num);\n            } else {\n                sm.push(num);\n            }\n        }\n    }\n    \n    double findMedian() {\n        if ((int)sm.size() == (int)lg.size()) \n            return (sm.top() + lg.top())*1.0/2.0;\n        return lg.top();\n    }\n};\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * MedianFinder* obj = new MedianFinder();\n * obj->addNum(num);\n * double param_2 = obj->findMedian();\n */\n\n\n /*\n\nequal\n- sm: pop to lg \n- lg: nothing\n\nlg bigger\n- sm: nothing\n- lg: pop to sm\n */","compare_result":"111111111111111111111","title_slug":"find-median-from-data-stream","has_notes":false,"flag_type":1}