{"id":1410880037,"question_id":2671,"lang":"cpp","lang_name":"C++","time":"2Â months","timestamp":1727985458,"status":10,"status_display":"Accepted","runtime":"232 ms","url":"/submissions/detail/1410880037/","is_pending":"Not Pending","title":"Shortest Cycle in a Graph","memory":"157.4 MB","code":"class Solution {\npublic:\n    const static int MAXN = 1e3+1;\n    int N, minDist;\n    vector<int> adj_list[MAXN];\n\n    void bfs(int src) {\n        queue<int> q;\n        vector<pair<int, int>> dist(N, {INT_MAX, INT_MAX});\n    \n        dist[src] = {0, -1};\n        q.push(src);\n        while (!q.empty()) {\n            int x = q.front();\n            q.pop();\n            for (int t : adj_list[x]) {\n                if (dist[t].first == INT_MAX) {\n                    dist[t].first = dist[x].first + 1;\n                    dist[t].second = x;\n                    q.push(t);\n                } else if (dist[x].second != t) {\n                    minDist = min(minDist, dist[t].first + dist[x].first + 1);\n                }\n            }\n        }\n    }\n\n    int findShortestCycle(int n, vector<vector<int>>& edges) {\n        N = n, minDist = INT_MAX;\n        for (auto i : edges) {\n            adj_list[i[0]].push_back(i[1]);\n            adj_list[i[1]].push_back(i[0]);\n        }\n        \n        for (int i=0; i<N; i++) \n            bfs(i);\n\n        return minDist == INT_MAX ? -1 : minDist;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"shortest-cycle-in-a-graph","has_notes":false,"flag_type":1}