{"id":1470780948,"question_id":1633,"lang":"cpp","lang_name":"C++","time":"18Â hours","timestamp":1733380274,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1470780948/","is_pending":"Not Pending","title":"Minimum Number of Increments on Subarrays to Form a Target Array","memory":"N/A","code":"class Solution {\npublic:\n    unordered_map<string, int> memo;\n    string getKey(int start, int end, int k) {\n        return to_string(start) + \"#\" + to_string(end) + \"#\" + to_string(k);\n    }\n\n    int solve(vector<int>& target, int start, int end, int k) {\n        if (start > end) \n            return 0;\n        \n        string key = getKey(start, end, k);\n        if (memo.count(key))\n            return memo[key];\n        \n        int minIdx = end, center = (start+end)/2;\n        for (int i = 0; i <= center-start; i++) {\n            if (target[center+i] < target[minIdx]) \n                minIdx = center+i;\n            if (target[center-i] < target[minIdx]) \n                minIdx = center-i;\n        }\n\n        int minOps = max(0, target[minIdx] - k);\n        int l = solve(target, start, minIdx-1, target[minIdx]);\n        int r = solve(target, minIdx+1, end, target[minIdx]);\n\n        return memo[key] = minOps + l + r;\n    }\n\n    int minNumberOperations(vector<int>& target) {\n        return solve(target, 0, target.size()-1, 0);\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100","title_slug":"minimum-number-of-increments-on-subarrays-to-form-a-target-array","has_notes":false,"flag_type":1}