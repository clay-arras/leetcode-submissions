{"id":1386014074,"question_id":885,"lang":"cpp","lang_name":"C++","time":"2 months, 3 weeks","timestamp":1726019426,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1386014074/","is_pending":"Not Pending","title":"Exam Room","memory":"N/A","code":"class ExamRoom {\npublic:\n    set<pair<int, pair<int, int>>> s;\n    map<int, pair<set<pair<int, pair<int, int>>>::iterator, set<pair<int, pair<int, int>>>::iterator>> m;\n    int N;\n    bool st = false, en = false;\n    \n    // check if distance to zero is bigger -- if empty then set to zero\n    ExamRoom(int n) {\n        N = n;\n    }\n    \n    int seat() {\n        if (s.empty()) {\n            if (st) {\n                en = true;\n                auto t = s.insert({(N-1)/2, {0, N-1}}).first;\n                m[0] = {t, s.end()};\n                m[N-1] = {s.end(), t};\n                return N-1;\n            } \n            st = true;   \n            return 0;\n        }\n        \n        // auto it = s.rbegin();\n        auto it = prev(s.begin());\n        if ((int)s.size() == 1)\n            it = s.begin();\n        pair<int, int> x = it->second;\n        if (x.first == -INT_MAX) {\n            auto l = s.insert({it->first/2, {0, x.second}}).first;\n            m[0] = {l, s.end()};\n            s.erase(it);\n            st = true;\n            return 0;\n        }\n        if (x.second == INT_MAX) {\n            auto r = s.insert({(N-1 - x.second)/2, {x.second, N-1}}).first;\n            m[N-1] = {s.end(), r};\n            s.erase(it);\n            en = true;\n            return N-1;\n        }\n        \n        int mid = (x.first + x.second) / 2;\n        \n        auto l = s.insert({(x.first + mid)/2, {x.first, mid}}).first;\n        auto r = s.insert({(mid + x.second)/2, {mid, x.second}}).first;\n        m[mid] = {l, r};\n        cout << \"PROBLEM \" << endl;\n        cout << it->first << \" \" << it->second.first << \" \" << it->second.second << endl;\n        for (auto i : s)\n            cout << i.first << \" \" << i.second.first << \" \" << i.second.second << endl;\n        cout << endl;\n        s.erase(it);\n        return mid;\n    }\n    \n    void leave(int p) {\n        if (p == 0) {\n            st = false; \n            int dist = m[p].first->second.second - m[p].first->second.first;\n            s.erase(m[p].first);\n            m[p].first = s.insert({dist, {-INT_MAX, m[p].first->second.second}}).first;\n            return;\n        }\n        if (p == N-1) {\n            en = false;\n            int dist = m[p].second->second.second - m[p].second->second.first;\n            s.erase(m[p].second);\n            m[p].second = s.insert({dist, {m[p].first->second.first, INT_MAX}}).first;\n            return;\n        }\n        \n        auto l = m[p].first;\n        auto r = m[p].second;\n        \n        s.insert({(l->second.first + r->second.second)/2, {l->second.first, r->second.second}});\n        s.erase(l);\n        s.erase(r);\n        m[p] = {s.end(), s.end()};\n    }\n};\n\n/**\n * Your ExamRoom object will be instantiated and called as such:\n * ExamRoom* obj = new ExamRoom(n);\n * int param_1 = obj->seat();\n * obj->leave(p);\n */","compare_result":"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"exam-room","has_notes":false,"flag_type":1}