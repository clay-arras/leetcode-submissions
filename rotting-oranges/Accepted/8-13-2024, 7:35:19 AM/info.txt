{"id":1354375186,"question_id":1036,"lang":"cpp","lang_name":"C++","time":"3 months, 3 weeks","timestamp":1723559719,"status":10,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/1354375186/","is_pending":"Not Pending","title":"Rotting Oranges","memory":"16.6 MB","code":"class Solution {\npublic:\n    int orangesRotting(vector<vector<int>>& grid) {\n        int N = (int)grid.size(), M = (int)grid[0].size();\n        vector<int> dx = {1, -1, 0, 0};\n        vector<int> dy = {0, 0, 1, -1};\n\n        const int MXV = INT_MAX;\n        queue<pair<int, int>> q;\n        vector<vector<int>> dist(N, vector<int>(M, MXV));\n\n        for (int i=0; i<N; i++) {\n            for (int j=0; j<M; j++) {\n                if (grid[i][j] == 2) {\n                    q.push({i, j});\n                    dist[i][j] = 0;\n                }\n            }\n        }\n\n        while (!q.empty()) {\n            pair<int, int> s = q.front();\n            q.pop();\n\n            for (int i=0; i<4; i++) {\n                int x = s.first + dx[i];\n                int y = s.second + dy[i];\n\n                if (x >= 0 && x < N && y >= 0 && y < M && grid[x][y] != 0 && dist[x][y] == MXV) {\n                    dist[x][y] = dist[s.first][s.second] + 1;\n                    q.push({x, y});\n                }\n            }\n        }\n\n        int ans = 0;\n        for (int i=0; i<N; i++) \n            for (int j=0; j<M; j++) \n                if (grid[i][j] == 1)\n                    ans = max(ans, dist[i][j]);\n                    \n        return (ans == MXV ? -1 : ans);\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"rotting-oranges","has_notes":false,"flag_type":1}